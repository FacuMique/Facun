{
	"name": "DataflowSimpson",
	"properties": {
		"folder": {
			"name": "Simpson"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Characters",
						"type": "DatasetReference"
					},
					"name": "Characters"
				},
				{
					"dataset": {
						"referenceName": "Episodes",
						"type": "DatasetReference"
					},
					"name": "Episodes"
				},
				{
					"dataset": {
						"referenceName": "Script_lines",
						"type": "DatasetReference"
					},
					"name": "Script"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "CharactersSalida",
						"type": "DatasetReference"
					},
					"name": "SalidaCharactersCSV"
				},
				{
					"dataset": {
						"referenceName": "EpisodesScriptSalida",
						"type": "DatasetReference"
					},
					"name": "SalidaEpisodesScript"
				}
			],
			"transformations": [
				{
					"name": "BorradoCharacters"
				},
				{
					"name": "BorrarNull"
				},
				{
					"name": "BorradoEpisodes"
				},
				{
					"name": "BorradoScript"
				},
				{
					"name": "EpisodesScript"
				}
			],
			"scriptLines": [
				"source(output(",
				"          id as integer,",
				"          name as string,",
				"          normalized_name as string,",
				"          gender as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Characters",
				"source(output(",
				"          id as integer,",
				"          image_url as string,",
				"          imdb_rating as string,",
				"          imdb_votes as string,",
				"          number_in_season as integer,",
				"          number_in_series as string,",
				"          original_air_date as string,",
				"          original_air_year as string,",
				"          production_code as string,",
				"          season as integer,",
				"          title as string,",
				"          us_viewers_in_millions as string,",
				"          video_url as string,",
				"          views as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Episodes",
				"source(output(",
				"          id as integer,",
				"          episode_id as integer,",
				"          number as integer,",
				"          raw_text as string,",
				"          timestamp_in_ms as string,",
				"          speaking_line as string,",
				"          character_id as integer,",
				"          location_id as integer,",
				"          raw_character_text as string,",
				"          raw_location_text as string,",
				"          spoken_words as string,",
				"          normalized_text as string,",
				"          word_count as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Script",
				"Characters select(mapColumn(",
				"          id,",
				"          Nombre = normalized_name,",
				"          Genero = gender",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> BorradoCharacters",
				"BorradoCharacters filter(Genero!='NULL') ~> BorrarNull",
				"Episodes select(mapColumn(",
				"          id,",
				"          imdb_rating,",
				"          imdb_votes,",
				"          number_in_season,",
				"          number_in_series,",
				"          original_air_date,",
				"          original_air_year,",
				"          production_code,",
				"          season,",
				"          title,",
				"          us_viewers_in_millions,",
				"          views",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> BorradoEpisodes",
				"Script select(mapColumn(",
				"          id,",
				"          episode_id,",
				"          number,",
				"          timestamp_in_ms,",
				"          speaking_line,",
				"          character_id,",
				"          location_id,",
				"          raw_character_text,",
				"          raw_location_text,",
				"          spoken_words,",
				"          word_count",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> BorradoScript",
				"BorradoEpisodes, BorradoScript join(BorradoEpisodes@id == episode_id,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> EpisodesScript",
				"BorrarNull sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SalidaCharactersCSV",
				"EpisodesScript sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SalidaEpisodesScript"
			]
		}
	}
}